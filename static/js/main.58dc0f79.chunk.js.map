{"version":3,"sources":["components/Box.js","components/Drumkit.js","App.js","serviceWorker.js","index.js"],"names":["Box","props","handleClick","bind","keyId","document","getElementById","play","innerHTML","this","desc","className","id","keyCode","onClick","text","src","Component","Drumkit","state","keys","key","handleKeyPress","event","result","find","obj","addEventListener","map","idx","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oNAEqBA,E,kDAEnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,YAAc,EAAKA,YAAYC,KAAjB,gBAFF,E,wDAKPC,GAESC,SAASC,eAAeF,GAChCG,OACXF,SAASC,eAAe,WAAWE,UAAYC,KAAKR,MAAMS,O,+BAGlD,IAAD,OACP,OACE,yBAAKC,UAAU,eAAeC,GAAIH,KAAKR,MAAMY,QAASC,QAAS,kBAAM,EAAKZ,YAAY,EAAKD,MAAMc,QAC9FN,KAAKR,MAAMc,KACZ,2BAAOJ,UAAU,OAAOC,GAAIH,KAAKR,MAAMc,KAAMC,IAAKP,KAAKR,MAAMe,Y,GAlBpCC,aCCZC,E,kDACnB,WAAYjB,GAAQ,IAAD,8BACjB,cAAMA,IACDkB,MAAQ,CACXC,KAAM,CACJ,CACEC,IAAK,IACLR,QAAS,GACTG,IAAK,2DACLN,KAAM,YAER,CACEW,IAAK,IACLR,QAAS,GACTG,IAAK,2DACLN,KAAM,YAER,CACEW,IAAK,IACLR,QAAS,GACTG,IAAK,2DACLN,KAAM,YAER,CACEW,IAAK,IACLR,QAAS,GACTG,IAAK,6DACLN,KAAM,YAER,CACEW,IAAK,IACLR,QAAS,GACTG,IAAK,2DACLN,KAAM,YAER,CACEW,IAAK,IACLR,QAAS,GACTG,IAAK,yDACLN,KAAM,UAER,CACEW,IAAK,IACLR,QAAS,GACTG,IAAK,6DACLN,KAAM,cAER,CACEW,IAAK,IACLR,QAAS,GACTG,IAAK,6DACLN,KAAM,QAER,CACEW,IAAK,IACLR,QAAS,GACTG,IAAK,yDACLN,KAAM,SAIZ,EAAKY,eAAiB,EAAKA,eAAenB,KAApB,gBA5DL,E,2DA+DJoB,GAEb,IAAIC,EAASf,KAAKU,MAAMC,KAAKK,MAAK,SAAAC,GAChC,OAAOA,EAAIb,UAAYU,EAAMV,WAG5BW,IAEcnB,SAASC,eAAekB,EAAOH,KACvCd,OAEPF,SAASC,eAAe,WAAWE,UAAYgB,EAAOd,Q,+BAKxDL,SAASsB,iBAAiB,UAAWlB,KAAKa,gBADnC,IAECF,EAASX,KAAKU,MAAdC,KACR,OACE,yBAAKR,GAAG,UAAUD,UAAU,WAEzBS,EAAKQ,KAAI,SAACP,EAAKQ,GAAN,OACR,kBAAC,EAAD,CAAKd,KAAMM,EAAIA,IAAKL,IAAKK,EAAIL,IAAKH,QAASQ,EAAIR,QAASQ,IAAKQ,EAAKnB,KAAMW,EAAIX,UAG9E,4BACA,uBAAGE,GAAG,WAAN,sB,GA1F6BK,aCStBa,MARf,WACE,OACE,yBAAKlB,GAAG,eAAeD,UAAU,aAC/B,kBAAC,EAAD,QCKcoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjC,SAASC,eAAe,SD0HpB,kBAAmBiC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.58dc0f79.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Box extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick(keyId) {\r\n    // play audio file when key is clicked using id of audio div\r\n    const btnClicked = document.getElementById(keyId);\r\n    btnClicked.play();\r\n    document.getElementById('keyDesc').innerHTML = this.props.desc;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"box drum-pad\" id={this.props.keyCode} onClick={() => this.handleClick(this.props.text)}>\r\n        {this.props.text}\r\n        <audio className=\"clip\" id={this.props.text} src={this.props.src} /> \r\n      </div>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react'\r\nimport Box from './Box';\r\n\r\nexport default class Drumkit extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      keys: [\r\n        {\r\n          key: 'Q', \r\n          keyCode: 81,\r\n          src: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3',\r\n          desc: 'Heater#1'\r\n        },\r\n        {\r\n          key: 'W', \r\n          keyCode: 87,\r\n          src: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3',\r\n          desc: 'Heater#2'\r\n        },\r\n        {\r\n          key: 'E', \r\n          keyCode: 69,\r\n          src: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3',\r\n          desc: 'Heater#3'\r\n        },\r\n        {\r\n          key: 'A', \r\n          keyCode: 65,\r\n          src: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3',\r\n          desc: 'Heater#4'\r\n        },\r\n        {\r\n          key: 'S', \r\n          keyCode: 83,\r\n          src: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3',\r\n          desc: 'Heater#5'\r\n        },\r\n        {\r\n          key: 'D',\r\n          keyCode: 68,\r\n          src: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3',\r\n          desc: 'Dsc_Oh'\r\n        },\r\n        {\r\n          key: 'Z', \r\n          keyCode: 90,\r\n          src: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3',\r\n          desc: 'Kick n Hat'\r\n        },\r\n        {\r\n          key: 'X', \r\n          keyCode: 88,\r\n          src: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3',\r\n          desc: 'Kick'\r\n        },\r\n        {\r\n          key: 'C', \r\n          keyCode: 67,\r\n          src: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3',\r\n          desc: 'Cev'\r\n        },\r\n      ]\r\n    }\r\n    this.handleKeyPress = this.handleKeyPress.bind(this);\r\n  }\r\n\r\n  handleKeyPress(event) {\r\n    //Check if key pressed is in keys array and store as t/f\r\n    var result = this.state.keys.find(obj => {\r\n      return obj.keyCode === event.keyCode\r\n    });\r\n\r\n    if(result) {\r\n      // play the audio file that corresponds to the pressed key\r\n      const keyDiv = document.getElementById(result.key);\r\n      keyDiv.play();\r\n      // set display text to description of key\r\n      document.getElementById('keyDesc').innerHTML = result.desc;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    document.addEventListener(\"keydown\", this.handleKeyPress);\r\n    const { keys } = this.state;\r\n    return (\r\n      <div id=\"display\" className=\"display\">\r\n        {/* Map keypad to display div */}\r\n        {keys.map((key, idx) => (\r\n          <Box text={key.key} src={key.src} keyCode={key.keyCode} key={idx} desc={key.desc}/>\r\n        ))}\r\n        {/* add a description of the key that's being pressed */}\r\n        <p></p>\r\n        <p id=\"keyDesc\">Press a key!</p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Drumkit from './components/Drumkit';\n\nfunction App() {\n  return (\n    <div id=\"drum-machine\" className=\"container\">\n      <Drumkit/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}